* Kwoon App
** [100%] Release 1
*** DONE App is Bootstrapped
Rails 4 rspec pundit sorcery bootstrap postgresql
Gemfile with lots of defaults for common things
**** [5/5] AC
1. [X] have steps for bootstrapping a basic rails app set up how I like it
2. [X] default configurations for gems that should be set up early
3. [X] rails server command works
4. [X] database set up, initial migrations run
5. [X] rspec runs
**** Steps
***** > rails new kwoon --database=postgresql --skip-test-unit
***** configure Gemfile
***** > bundle install
***** > rake db:create
***** > rails server
it works now
***** [75%] run install generators for:
****** DONE rspec:install
be rails g rspec:install
****** TODO pundit:install
optional, just generates an application policy with defaults.
holding off for now
****** DONE sorcery:install
be rails g sorcery:install reset_password user_activation
******* DONE configure mailer for user_activation
****** DONE simple_form:install
be rails g simple_form:install --bootstrap
******* caveat
Be sure to have a copy of the Bootstrap stylesheet available on your application, you can get it on http://getbootstrap.com/.

Inside your views, use the 'simple_form_for' with one of the Bootstrap form classes, '.form-horizontal' or '.form-inline', as the following:

= simple_form_for(@user, html: { class: 'form-horizontal' }) do |form|
***** configure bootstrap
https://github.com/twbs/bootstrap-sass
will do as separate story (Site is not hideous)
*** DONE Admin can Log In/Out
**** [100%] AC
1. [X] db seeded with admin user
2. [X] login form on home page with email and password
3. [X] can log in and see /users (or /user/:id ?), which only authenticated users can see
4. [X] /users has log out link
5. [X] clicking log out brings you back to login page and you can't see /users
*** DONE Interested Person can submit a Student Application
**** [4/4] Acceptance Criteria
- [X] non-logged in users can visit the application page
- [X] the application page has some instructions and the application
  form (all fields required):
  - Name
  - Address
  - Phone number
  - Email
  - Emergency Contact Name and Phone number
  - Shaolin Wahnam courses previously taken (title, year,
    location, instructor for each, suggested but not required)
  - Previous martial arts experience
  - Relevant health issues
  - A little about yourself
  - Why Shaolin Kung Fu? How do you want your Shaolin Kung Fu
    practice to affect your life?
  - Do you agree to live by the 10 Shaoln Laws?
- [X] submitting a valid application:
  - [X] saves the application to the db
  - [X] creates a user for the application
  - [X] sends a confirmation email to the applicant
  - [X] emails the application to me
  - [X] displays a thank you/confirmation screen
- [X] submitting an invalid application redisplays the application form with instructions for fixing it
*** DONE Approved Applicant can register for a Course
For now, no UI for approving an application. I'm comfortable doing it from the
commandline console as follows:
1. u = User.find id
2. c = Course.find id
3. t = TokenService.generate_course_invite_token user: u, course: c
4. RegistrationMailer.invite(u, c, t).deliver_later
**** [6/6] Acceptance Criteria
- [X] Admin can send an email registration invite for a course
  - [X] email includes a registration link with an invite token
  - [X] invite token is a JWT with user id and course id (expiration is 3 months
    from issuance of token)
- [X] registration page has some basic course and student info
  - [X] name of course, start and end date
  - [X] student name
- [X] registration page has form with (all required):
  - [X] hidden field for token (to associate student and course with
    registration)?
- [X] submitting a valid registration
  - [X] creates a registration for the student and course
  - [X] displays a confirmation/thank you page
  - [X] sends a confirmation/thank you email
- [X] visiting a registration link with an expired token displays an error
  message that the user needs to contact me for a new course invite
- [X] visiting a registration link with a token for a student who has already
  registered displays a message that the student has already registered
*** DONE Applicant pays for Course during registration
**** Design
***** Plans
Stripe subscriptions DO meet our needs after all. (Plans should be set up in
Stripe)
****** Pay in Full (Course)
- no subscription, just a simple one-time charge
- create customer with CC
****** Monthly (Course)
- one-time charge for deposit
- create customer with CC
- subscription for monthly amount with trial end set to the day before the first
  payment (payment_start_date set on Course?).
- User Contract maintains balance which is updated from charge.succeeded web
  hook
- contract id in subscription metadata?
****** Annual Membership
- annual subscription with trial end set to the day before the first of the
  month
- create customer with CC
****** Monthly (Membership)
- monthly subscription with trial end set to the day before the first of the
  month
- create customer with CC
***** Flow
1. js intercepts registration form submission and sends CC info to Stripe and
   gets back either the stripeToken or validation errors
2. js callback submits the registration form with the stripeToken (and no CC
   info). It still submits if there are errors with the CC but the app makes
   sure not to save the registration, just validate it so all form errors can be
   displayed at the same time.
3. app server creates stripe customer for user and subscribes her to stripe plan
   associated with the selected contract. For pay-in-full, just do the stripe
   charge and handle errors or create the registration if all is good. For
   the subscription-based contracts, successful subscription creation means
   successful charge (failures raise errors), so handle errors or create the
   registration if all is good. Create the contract and associate it with the
   stripe subscription if there is one.
4. app server listens for invoice.payment_succeeded web hook to update
   installment plan-based contracts (Monthly Course contracts). When the
   Contract balance is 0, it cancels the stripe subscription
**** [12/12] Plan of Attack
1. [X] create contract model: user id, title, status, total, balance,
   payment amount, start date, end date, stripe id
2. [X] course registration form includes hard-coded payment plan dropdowns with
   prices (monthly or pay-in-full) and creates a contract on valid submission
3. [X] course registration form submits CC info to stripe, retrieves stripe
   token, and submits registration form for real with stripe token
4. [X] spike integrating stripe for pay-in-full plan
5. [X] spike integrating stripe for monthly plan
6. [X] Courses have first_installment_date field
7. [X] convert Contract::TEMPLATES into a model (ContractPlan?)
8. [X] associate Courses with ContractPlans
9. [X] replace Contract::TEMPLATES bits with ContractPlans
10. [X] determine testing strategy (WebMock, VCR, integration vs. unit tests)
11. [X] implement happy path charging based on spikes
12. [X] identify sad paths for charging based on spikes
**** [9/9] Acceptance Criteria
- [X] course registration form includes (both required)
  - [X] payment plan dropdown with prices (monthly or pay-in-full)
  - [X] CC payment info
- [X] submitting a valid registration for pay-in-full
  - [X] creates a stripe charge
  - [X] creates a stripe customer for the user if she doesn't already have one
  - [X] creates a contract for the user with total = full amount, balance = 0,
    payment_amount = 0, start date and end date equal to course's, and status =
    'future'
- [X] submitting a valid registration for monthly plan
  - [X] creates a stripe charge
  - [X] creates a stripe customer for the user if she doesn't already have one
  - [X] creates a contract for the user with total = full amount, balance =
    total - deposit, payment_amount = monthly charge, start date and end date
    equal to course's, and status = 'future'
- [X] doesn't register the user or create a contract if the stripe charge fails
- [X] display validation errors when the stripe token for the credit card info
  can't be created
- [X] display validation errors if the stripe charge fails
- [X] handle errors raised from stripe failures (customer, subscription, card,
  and charge are all potentially created)
- [X] handle when a card is declined
- [X] have no selected payment plan fail validation instead of crash
*** DONE Use zip code and cardholder name on registration form
**** [3/3] Acceptance Criteria
- [X] zip code and cardholder name are on registration form and sent to stripe
  with credit card data
- [X] exp month is a dropdown of months (with numeric values)
- [X] exp year is a dropdown with options ranging from the current year to 10
  years ahead
*** DONE Site is not hideous
**** DONE configure bootstrap
https://github.com/twbs/bootstrap-sass
**** [6/6] Acceptance Criteria
***** DONE application layout is styled
***** DONE applications/new is styled
***** DONE info/index is styled
***** DONE applications/confirmation and registrations/confirmation are styled
***** DONE registrations/new is styled
***** DONE sessions/new is styled
*** DONE Copy is in place
**** [3/3] Acceptance Criteria
- [X] Application Confirmation email
- [X] Registration Invite email
- [X] Course Registration page
*** DONE Audit Release
**** [9/9] Issues Found
***** DONE Obvious return to main site link in application confirmation body
***** DONE Tab order for application form goes down instead of across
***** DONE Error message at top of applications/new when there are validation errors
***** DONE Links to student application from main site
***** DONE Make kwoon.shaolinstpete.com default to /applications/new
***** DONE Live stripe keys in production
***** DONE Instructions on applications/new
***** DONE Validation error styles on registrations/new match those on applications/new
***** DONE Error message at the top of registrations/new when there are validation errors
*** DONE Deploy to production
**** DONE Cannibalize Capfile for course_registration app
**** DONE Make sure log rotation is set up
**** DONE Look into site-wide SSL certificate
or at least transferring the current secure.shaolinstpete.com one
***** Result
It looks like I have a current SSL for shaolinstpete.com which I may be able to
use for www.shaolinstpete.com, too.
**** [3/3] Set up SSL for shaolinstpete.com
***** DONE Generate a CSR for shaolinstpete.com
***** DONE Follow set up instructions
***** DONE Document how to do for my linode and where everything is
*** DONE Invite existing approved applicants
**** [3/3] Acceptance Criteria
***** DONE Users created/applications imported
***** DONE Course set up
***** DONE Course contract plans set up
** [100%] Release 2
*** DONE Admin can set up Events
An Event is a camp/workshop/seminar/retreat. Something that runs in a location for a certain date range and has one or more courses. Registration works differently than for individual courses. There are no contracts and no contract plans (only pay-in-full). Simple discounts can be set up for an event and users don't have to submit an application first.

For this story, setting up events through a UI is not required. Being able to set them up via rails console is acceptable. We want to minimize UI until we have enough of a reason to implement a proper frontend with React and friends.
**** [8/8] Acceptance Criteria
- [X] Event model exists with the following fields:
  - title
  - description
  - location
  - start date
  - end date
  - has many Courses
  - has many Event Discounts
- [X] Event Discount model exists with the following fields:
  - event Id
  - description
  - course Ids (array or comma-delimited)
  - price (in cents)
- [X] Event Registration model exists with the following fields:
  - event id
  - user id
  - amount paid
  - stripe id (for payment)
- [X] Courses can now optionally belong to an Event
- [X] Either Courses should have an optional base price or there should be an event_courses table that has a price (leaning towards former)
- [X] Event page has a list of event courses (chronological by-end-date) with checkboxes and prices
- [X] Checking and unchecking courses changes the total displayed
- [X] Discounts are automatically applied and reflected in total amount
*** DONE Users can register for Events
**** [13/13] Acceptance Criteria
- [X] Registering for an event creates an Event Registration
- [X] Registering for an event creates Course Registrations for each course the user registered for
- [X] The event page has a user and CC info section with a "Register" button
- [X] User model has a from/location column (optional) for capturing city/state (if USA) or city/country (if not USA)
- [X] Registrations for an email not already in the system create a new user and new stripe customer
- [X] Registrations for an email already in the system use the existing user/stripe customer
- [X] Event registrations are one-time payments (pay-in-full) only
- [X] Event registration payments should attach the event name + registered course titles to the stripe payment for easy lookup later
- [X] At least one course must be chosen
- [X] Validation works like course registration
- [X] Successful registration sends an email to registrant and to admin
- [X] Successful registration displays a confirmation page without much info, since the page will be viewable without login
- [X] Test with 2016 Festival course/event data
*** DONE Emails are sent using a transactional email service
** [0%] Release 3
*** TODO Chi Kung students apply, register, and pay through Kwoon
**** Typical flow
1. user goes to chi kung page on AoA website
2. user clicks application link, taking them to kwoon application page
3. user submits application
4. instructor approves or denies application (also determining what course the user can register for), user is informed (stop here if denied)
5. user is invited to register for a specific course
6. user goes to link, sees registration/payment page, submits it, is registered for course
7. user is emailed confirmation
8. user is automatically emailed reminder email week before course and then day before course
**** DONE Applicants pick their interest
Decide whether to define status system and configure transactional emails through app (a la Admin can send emails to different groupings of users) or automatically add them to a mailchimp mailing list
***** [4/4] Acceptance Criteria
- [X] On application, there is a section for interests with the following (checkbox) options:
  - Shaolin Cosmos Chi Kung
  - Shaolin Kung Fu
  - Wahnam Tai Chi Chuan(?)
- [X] At least one interest must be selected on the application
- [X] Existing users with applications should be set as interested in Shaolin Kung Fu
- [X] Existing users with no applications (i.e. Festival attendees) should have no interests unless I know otherwise
**** TODO First session Chi Kung courses set up in Kwoon
***** [0/2] Acceptance Criteria
- [ ] Level 1 course starting 1/31/2017
- [ ] Level 2 course starting 1/31/2017
**** TODO Admins can do class CRUD
***** [0/2] Acceptance Criteria
- [ ] Only classes with no registrations can be deleted
- [ ]
**** TODO Chi Kung payment model is supported
Level 1 course:
- students have to do 11 weeks but can start in the middle of one and end in the middle of the next (rolling registration)
- $495 for 1 11-week course
- must buy one course at a time (Christina evaluates students after each course to determine whether they should stay in Level 1)

Level 2 course:
- $495 for 1 11-week course
- $1500 for the year (all 4 courses, no make ups)

**** TODO New Kung Fu payment model (Monthly/Annual) is supported
**** TODO New Kung Fu course set up in Kwoon
*** TODO App updates contracts on stripe charges
Stripe will automatically handle subscription billing, but we need to track
status of installment plans to determine when to cancel a subscription. We can
do this through stripe webhooks
**** [0/9] Acceptance Criteria
- [ ] When a subscription payment is made (invoice.paid event), a stripe webhook
  is configured to send a notification to a designated route in the app
- [ ] contracts whose status is "future" have their status changed to "active"
  when a contract payment is made (should it error if the payment happens
  outside of the contract's date range?)
- [ ] the payment amount is subtracted from the contract's balance
- [ ] if the contract is paid off, the subscription is canceled (what
  notifications do I want?)
- [ ] a daily email is sent to me reporting any such activity that day (no email
  is sent if there is no activity)
- [ ] email receipt to students successfully charged?
- [ ] test webhook calls are viewable and don't muck things up (since they can
  be made even when stripe is in "live" mode)
- [ ] don't trust callbacks on their own. Instead, use an incoming callback's id to query Stripe for the event object and work with it instead.
- [ ] webhook calls are idempotent, meaning that the same call made multiple times yields the same result (e.g. duplicate callbacks don't both update the contract's balance). To achieve this, capture each callback in the db (just enough info to identify it). When a callback comes in, see if it's already in the db and only act on it if it isn't.

** Backlog
*** DB backups
Use something like rsync.net for offsite backups
*** Clean up stripe callback events db table periodically (and automatically)
For every incoming webhook callback, we identify it and fetch it from the Stripe API and then save the identifying info in the db in case the same callback comes in multiple times. Periodically, we should clean out this table. Currently, I'm thinking a background job scheduled as a cron job should do the trick nicely. We could save the last 6-12 months of callbacks maybe to start.
*** Clean up old assets on deploy
tmp/cache/assets/production/sprockets/v3.0 gets littered with old asset files
that aren't cleaned up. Additionally, it's possible that current/public/assets/
keeps more versions of the application js file than it should. Maybe there are
more issues lurking, too.
*** Audit flow: reading an ad thru registration
*** Multi-threaded
Puma is best when serving a multi-threaded app. A multi-threaded app takes up
less memory and generally runs more efficiently than a multi-process one, but
while rails is thread safe, there is still a bit to do to switch to
multi-threaded. MRI isn't truly multi-threaded, so we will need to investigate
moving to rubinius (I don't want to run on a java stack, so JRuby is out). We
also need to investigate exactly how to set the app up for multi-threaded
concurrency, how to check that it's working correctly, and auditing the app to
ensure there are not thread unsafe happenings that will cause problems.
*** Site design v2
**** [0/2] Acceptance Criteria
***** TODO SW logo in Kwoon header
***** TODO ?
*** Integration Tests for Registration
*** App auto-sends renewal notice emails
*** Admin can manage users
*** Admin can view and approve applications through the site
*** Enrolled students receive renewal notices before their current subscription expires
*** Admin can send emails to different groupings of users
Some grouping ideas:
- approved applicants who haven't registered for a course
- current ongoing students
- inactive students
- current course-enrolled students
*** Auto-renewable contracts
*** Student can renew a contract
should be able to use existing or new payment info to renew or register for a course. I just verified that if a customer supplies a credit card that is already associated with them as a payment source, a duplicate payment source is created.
*** Emails are sent via background jobs
Currently, emails are sent synchronously, which means that the page waits for the mailer before continuing on doing its thing. Since we need background jobs already for cleaning out the stripe callback table, we might as well set up the mailers to work via background jobs, too.
*** Specific instances of courses can be tracked as part of overall courses
In other words, the app recognizes that someone taking the Level 1 course in Jan
2016 and someone who took the Level 1 course in Jan 2017 both took the Level 1
course.

Benefit is that we can track things like whether a student meets the
pre-requisites for a course.
*** Student can pay directly from a bank account
